---
- name: Add the OS specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Mysql | Set root password
  debconf: name='mysql-server-5.7' question='mysql-server/root_password' value='{{ mysql_root_db_pass }}' vtype='password'
  environment:
    DEBIAN_FRONTEND: 'noninteractive'

- name: Mysql | Set root re-password
  debconf: name='mysql-server-5.7' question='mysql-server/root_password_again' value='{{ mysql_root_db_pass }}' vtype='password'
  environment:
    DEBIAN_FRONTEND: 'noninteractive'

- name: Install the mysql packages in Debian derivatives
  apt: name={{ item }} state=installed update_cache=yes
  with_items: "{{ mysql_pkgs }}"
  environment: 
    DEBIAN_FRONTEND: 'noninteractive'
  when: ansible_os_family == 'Debian'

- name: copy mysql config
  template: src=templates/mysqld.cnf.j2  dest='/etc/mysql/mysql.conf.d/mysqld.cnf' owner=root group=root mode=0644  

- name: Start the mysql services
  service: name={{ mysql_service }} state=started enabled=yes

- name: update mysql root password for all root accounts
  mysql_user: name="root"  password="{{ mysql_root_db_pass }}" host="{{ item }}" login_password="{{mysql_root_db_pass}}" login_user=root
  with_items:
   - "{{ ansible_hostname }}"
   - 127.0.0.1
   - ::1
   - localhost
  when: ansible_hostname != 'localhost' 

- name: update mysql root password for all root accounts
  mysql_user: login_user="root" password="{{ mysql_root_db_pass }}" host="{{ item }}" login_password="{{mysql_root_db_pass}}" login_user=root
  with_items:
   - 127.0.0.1
   - ::1
   - localhost
  when: ansible_hostname == 'localhost' 

- name: ensure anonymous users are not in the database
  mysql_user: login_user="root" login_password="{{ mysql_root_db_pass }}"  name='' host={{ item }} state=absent
  with_items:
   - localhost
   - "{{ ansible_hostname }}"

- name: remove the test database
  mysql_db: name=test state=absent login_user="root" login_password="{{ mysql_root_db_pass }}" 

- name: Create the database's
  mysql_db: name={{ item.name }} state=present login_user="root" login_password="{{ mysql_root_db_pass }}" 
  with_items: "{{ mysql_db }}"
  when: mysql_db|lower() != 'none'

- name: Create the database users
  mysql_user: name={{ item.name }} login_user="root" password={{ item.pass|default("foobar") }}  login_password="{{ mysql_root_db_pass }}"  
                priv={{ item.priv|default("*.*:ALL") }} state=present host={{ item.host | default("localhost") }}
  with_items: "{{ mysql_users }}"
  when: mysql_users|lower() != 'none'

- name: Create the replication users
  mysql_user: name={{ item.name }}  host="%" password={{ item.pass|default("foobar") }} login_user="root" login_password="{{ mysql_root_db_pass }}" 
                priv=*.*:"REPLICATION SLAVE" state=present
  with_items: "{{ mysql_repl_user }}"
  when: mysql_repl_role == 'master'

- name: Check if slave is already configured for replication
  mysql_replication: mode=getslave
  ignore_errors: true
  register: slave
  when: mysql_repl_role == 'slave'

- name: Ensure the hostname entry for master is available for the client.
  lineinfile: dest=/etc/hosts regexp="{{ mysql_repl_master }}" line="{{ hostvars[mysql_repl_master].ansible_default_ipv4.address + ' ' + mysql_repl_master }}" state=present
  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined

- name: Get the current master servers replication status
  mysql_replication: mode=getmaster
  delegate_to: "{{ mysql_repl_master }}"
  register: repl_stat
  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined

- name: Change the master in slave to start the replication
  mysql_replication: mode=changemaster master_host={{ mysql_repl_master }} master_log_file={{ repl_stat.File }} master_log_pos={{ repl_stat.Position }} master_user={{ mysql_repl_user[0].name }} master_password={{ mysql_repl_user[0].pass }}
  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined


